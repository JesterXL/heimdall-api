// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jzon = require("rescript-jzon/src/Jzon.js");
var Test = require("rescript-test/src/Test.js");
var Curry = require("@rescript/std/lib/js/curry.js");
var $$Promise = require("@ryyppy/rescript-promise/src/Promise.js");
var Assertions = require("./services/Assertions.js");
var Belt_Array = require("@rescript/std/lib/js/belt_Array.js");
var ListEvents = require("../../src/ListEvents.js");

function stubDynamo(param, param$1, param$2, param$3) {
  return Promise.resolve(Jzon.encodeWith({
                  items: [{
                      eventName: "Test",
                      lastUpdated: 100,
                      permission: /* Free */0,
                      end: 200,
                      primaryKey: "event",
                      start: 100
                    }],
                  lastEvaluatedKey: undefined,
                  ok: true,
                  error: undefined
                }, ListEvents.Codecs.listEventsDynamoResponse));
}

Test.testAsync("should cool async", undefined, (function (cb) {
        $$Promise.$$catch(ListEvents.listEvents(stubDynamo, {
                    start: 90,
                    end: 400,
                    firstIndex: 1,
                    afterToken: undefined
                  }).then(function (result) {
                  if (result.TAG === /* Ok */0) {
                    var firstEvent = Belt_Array.get(result._0.items, 0);
                    if (firstEvent !== undefined) {
                      Assertions.stringEqual(undefined, firstEvent.eventName, "Test");
                      Curry._2(cb, 1, undefined);
                      return Promise.resolve(true);
                    } else {
                      Test.fail(undefined, undefined);
                      Curry._2(cb, 1, undefined);
                      return Promise.resolve(false);
                    }
                  }
                  Test.fail(undefined, undefined);
                  Curry._2(cb, 1, undefined);
                  return Promise.resolve(false);
                }), (function (param) {
                Test.fail(undefined, undefined);
                Curry._2(cb, 1, undefined);
                return Promise.resolve(false);
              }));
        
      }));

exports.stubDynamo = stubDynamo;
/*  Not a pure module */
