// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jzon = require("rescript-jzon/src/Jzon.js");
var Curry = require("@rescript/std/lib/js/curry.js");
var Js_option = require("@rescript/std/lib/js/js_option.js");
var QueryJs = require("./services/query.js");

var lastEvaluatedEvent = Jzon.object3((function (param) {
        return [
                param.primaryKey,
                param.start,
                param.end
              ];
      }), (function (param) {
        return {
                TAG: /* Ok */0,
                _0: {
                  primaryKey: param[0],
                  start: param[1],
                  end: param[2]
                }
              };
      }), Jzon.field("PK", Jzon.string), Jzon.field("start", Jzon.$$int), Jzon.field("end", Jzon.$$int));

function permissionToString(permission) {
  switch (permission) {
    case /* Free */0 :
        return "free";
    case /* Blocked */1 :
        return "blocked";
    case /* Request */2 :
        return "request";
    
  }
}

var $$event = Jzon.object6((function (param) {
        return [
                param.eventName,
                param.lastUpdated,
                permissionToString(param.permission),
                param.end,
                param.primaryKey,
                param.start
              ];
      }), (function (param) {
        var start = param[5];
        var primaryKey = param[4];
        var end = param[3];
        var permissionString = param[2];
        var lastUpdated = param[1];
        var eventName = param[0];
        switch (permissionString) {
          case "blocked" :
              return {
                      TAG: /* Ok */0,
                      _0: {
                        eventName: eventName,
                        lastUpdated: lastUpdated,
                        permission: /* Blocked */1,
                        end: end,
                        primaryKey: primaryKey,
                        start: start
                      }
                    };
          case "free" :
              return {
                      TAG: /* Ok */0,
                      _0: {
                        eventName: eventName,
                        lastUpdated: lastUpdated,
                        permission: /* Free */0,
                        end: end,
                        primaryKey: primaryKey,
                        start: start
                      }
                    };
          case "request" :
              return {
                      TAG: /* Ok */0,
                      _0: {
                        eventName: eventName,
                        lastUpdated: lastUpdated,
                        permission: /* Request */2,
                        end: end,
                        primaryKey: primaryKey,
                        start: start
                      }
                    };
          default:
            return {
                    TAG: /* Error */1,
                    _0: {
                      NAME: "UnexpectedJsonValue",
                      VAL: [
                        [{
                            TAG: /* Field */0,
                            _0: "permission"
                          }],
                        permissionString
                      ]
                    }
                  };
        }
      }), Jzon.field("eventName", Jzon.string), Jzon.field("lastUpdated", Jzon.$$int), Jzon.field("permission", Jzon.string), Jzon.field("end", Jzon.$$int), Jzon.field("PK", Jzon.string), Jzon.field("start", Jzon.$$int));

var listEventsDynamoResponse = Jzon.object4((function (param) {
        return [
                param.items,
                param.lastEvaluatedKey,
                param.ok,
                param.error
              ];
      }), (function (param) {
        return {
                TAG: /* Ok */0,
                _0: {
                  items: param[0],
                  lastEvaluatedKey: param[1],
                  ok: param[2],
                  error: param[3]
                }
              };
      }), Jzon.field("items", Jzon.array($$event)), Jzon.optional(Jzon.field("lastEvaluatedKey", lastEvaluatedEvent)), Jzon.field("ok", Jzon.bool), Jzon.optional(Jzon.field("error", Jzon.string)));

var Codecs = {
  lastEvaluatedEvent: lastEvaluatedEvent,
  permissionToString: permissionToString,
  $$event: $$event,
  listEventsDynamoResponse: listEventsDynamoResponse
};

function listEventsJS(prim0, prim1, prim2, prim3) {
  return QueryJs.listEvents(prim0, prim1, prim2, prim3);
}

function listEvents(dynamoFunc, options) {
  return Curry._4(dynamoFunc, options.start, options.end, options.firstIndex, options.afterToken).then(function (response) {
              console.log("listEvents response:", response);
              var reason = Jzon.decodeWith(response, listEventsDynamoResponse);
              if (reason.TAG !== /* Ok */0) {
                return Promise.resolve({
                            TAG: /* Error */1,
                            _0: "listEvents failed to decode the dynamo query response: " + Jzon.DecodingError.toString(reason._0)
                          });
              }
              var data = reason._0;
              if (data.ok === true) {
                return Promise.resolve({
                            TAG: /* Ok */0,
                            _0: data
                          });
              } else {
                return Promise.resolve({
                            TAG: /* Error */1,
                            _0: Js_option.getWithDefault("Unknown JS error", data.error)
                          });
              }
            });
}

function listEventsPartial(param) {
  return listEvents(listEventsJS, param);
}

function handler($$event) {
  console.log("event:", $$event);
  return Promise.resolve($$event);
}

if ((require.main === module)) {
  listEvents(listEventsJS, {
          start: 90,
          end: 400,
          firstIndex: 0,
          afterToken: undefined
        }).then(function (result) {
        console.log("result:", result);
        return Promise.resolve(true);
      });
}

exports.Codecs = Codecs;
exports.listEventsJS = listEventsJS;
exports.listEvents = listEvents;
exports.listEventsPartial = listEventsPartial;
exports.handler = handler;
/* lastEvaluatedEvent Not a pure module */
